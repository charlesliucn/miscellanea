server <- function(input, output, session) {
points <- eventReactive(input$latlon, {
cbind(station$Longtitude, station$Latitude)
}, ignoreNULL = FALSE)
output$mymap <- renderLeaflet({
leaflet() %>%
addProviderTiles("Stamen.Toner",
options = providerTileOptions(noWrap = TRUE)
) %>%
addMarkers(data = points(),popup = tips)
})
}
shinyApp(ui, server)
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("DT")
runApp()
shiny::runApp()
runApp()
View(allzips)
View(cleantable)
View(station)
library(shiny)
library(leaflet)
station = read.csv("201608_station_data.csv",header = T,sep = ",")
colnames(station) = c("Station ID:","Name:","Latitude:","Longtitude:",
"DockCount:","LandMark:","Installation Date:")
r_colors <- rgb(t(col2rgb(colors()) / 255))
names(r_colors) <- colors()
tips = apply(station,1,function(x){
paste(names(station),x,collapse = '<br/ >')})
ui <- fluidPage(
leafletOutput("mymap"),
p(),
actionButton("latlon", "New points")
)
server <- function(input, output, session) {
points <- eventReactive(input$latlon, {
cbind(station$Longtitude, station$Latitude)
}, ignoreNULL = FALSE)
output$mymap <- renderLeaflet({
leaflet() %>%
addProviderTiles("Stamen.Toner",
options = providerTileOptions(noWrap = TRUE)
) %>%
addMarkers(data = points(),popup = tips)
})
}
shinyApp(ui, server)
runApp()
View(cleantable)
runApp()
runApp()
load("F:/Programming/R/.RData")
View(station)
unique(station$landmark)
View(cleantable)
View(station)
length(unique(station$landmark))
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
print(source('Customer.R')$value)
runApp()
runApp()
shiny::runApp('Example')
library(leaflet)
library(leaflet)
library(RColorBrewer)
library(scales)
library(lattice)
library(dplyr)
library(dplyr)
library(dplyr)
allzips <- readRDS("data/superzip.rds")
allzips$latitude <- jitter(allzips$latitude)
allzips$longitude <- jitter(allzips$longitude)
allzips$college <- allzips$college * 100
allzips$zipcode <- formatC(allzips$zipcode, width=5, format="d", flag="0")
row.names(allzips) <- allzips$zipcode
cleantable <- allzips %>%
select(
City = city.x,
State = state.x,
Zipcode = zipcode,
Rank = rank,
Score = centile,
Superzip = superzip,
Population = adultpop,
College = college,
Income = income,
Lat = latitude,
Long = longitude
)
runApp('Example')
shiny::runApp('Example')
runApp('Example')
shiny::runApp('Example')
shiny::runApp('Example')
View(station)
runApp('Example')
runApp('Example')
hms = ymd_hms(mdy_hm(trip$Start.Date))
trip$hour = hour(hms) + minute(hms)/60
ggplot(trip, aes(x = hour)) +
geom_freqpoly(bins = 100,color = "blue") +
labs(title = "Trips Distribution(One Day)",x = "Hours in a Day",
y = "The Number of Trips")
library(ggplot2)
library(dplyr)
library(lubridate)
hms = ymd_hms(mdy_hm(trip$Start.Date))
trip$hour = hour(hms) + minute(hms)/60
ggplot(trip, aes(x = hour)) +
geom_freqpoly(bins = 100,color = "blue") +
labs(title = "Trips Distribution(One Day)",x = "Hours in a Day",
y = "The Number of Trips")
hms = ymd_hms(mdy_hm(trip$Start.Date))
trip$hour = hour(hms) + minute(hms)/60
ggplot(trip, aes(x = hour)) +
geom_freqpoly(bins = 100,color = "blue") +
labs(title = "Trips Distribution(One Day)",x = "Hours in a Day",
y = "The Number of Trips")
hour = floor(hour(hms) + minute(hms)/60)
hourfreq = as.data.frame(table(hour))
ggplot(data = hourfreq, aes(x = hour, y = Freq)) +
geom_bar(stat = "identity",fill = "blue",color = "darkblue") +
labs(title = "Trips Distribution(One Day)",x = "Hours in a Day",
y = "The Number of Trips")
runApp('Example')
runApp('Example')
runApp('Example')
shiny::runApp('Example')
runApp('Example')
runApp('Example')
runApp('Example')
runApp('Example')
runApp('Example')
runApp('Example')
runApp('Example')
?leafletProxy
station[station$landmark == "San Jose"]
station[station$landmark == "San Jose",]
mean(station[station$landmark == "San Jose",]$lat]
mean(station[station$landmark == "San Jose",]$lat)
mean(station[station$landmark == "San Jose",]$long)
mean(station[station$landmark == "San Francisco",]$long)
mean(station[station$landmark == "San Francisco",]$lat)
runApp('Example')
runApp('Example')
runApp('Example')
runApp('Example')
runApp('Example')
mean(station[station$landmark == "Palo Alto",]$long)
mean(station[station$landmark == "Palo Alto",]$long)
mean(station[station$landmark == "Palo Alto",]$lat)
lat[1] = mean(station[station$landmark == "San Jose",]$lat)
lat[1] = mean(station[station$landmark == "San Jose",]$lat)
lat[1] = mean(station[station$landmark == "San Jose",]$lat)
lat[1] = mean(station[station$landmark == "San Jose",]$lat)
lat[1] = mean(station[station$landmark == "San Jose",]$lat)
lat[2] = mean(station[station$landmark == "San Francisco",]$lat)
lat[3] = mean(station[station$landmark == "Palo Alto",]$lat)
lat[4] = mean(station[station$landmark == "Mountain View",]$lat)
long[1] = mean(station[station$landmark == "San Jose",]$long)
long[2] = mean(station[station$landmark == "San Francisco",]$long)
long[3] = mean(station[station$landmark == "Palo Alto",]$long)
long[4] = mean(station[station$landmark == "Mountain View",]$long)
lat = rep(0,4)
long = rep(0,4)
lat[1] = mean(station[station$landmark == "San Jose",]$lat)
lat[2] = mean(station[station$landmark == "San Francisco",]$lat)
lat[3] = mean(station[station$landmark == "Palo Alto",]$lat)
lat[4] = mean(station[station$landmark == "Mountain View",]$lat)
long[1] = mean(station[station$landmark == "San Jose",]$long)
long[2] = mean(station[station$landmark == "San Francisco",]$long)
long[3] = mean(station[station$landmark == "Palo Alto",]$long)
long[4] = mean(station[station$landmark == "Mountain View",]$long)
shiny::runApp('Example')
lat
long
runApp('Example')
runApp('Example')
runApp('Example')
runApp('Example')
runApp('Example')
runApp('Example')
runApp('Example')
runApp('Example')
runApp('Example')
runApp('Example')
runApp('Example')
runApp('Example')
runApp('Example')
runApp('Example')
runApp('Example')
runApp('Example')
runApp('Example')
runApp('Example')
runApp('Example')
runApp('Example')
runApp('Example')
runApp('Example')
shiny::runApp('Example')
runApp('Example')
runApp('Example')
runApp('Example')
runApp('Example')
runApp('Example')
runApp('Example')
conditionalPanel()
?conditionalPanel
runApp('C:/Users/Ââç/Desktop/superzip-example')
runApp('Example')
shiny::runApp('Example')
?filter
?filter
?updateSelectInput
?table
table(station$landmark)
group_by(station)
a = group_by(station$landmark)
a = group_by(station,landmark)
View(a)
stations = data.frame(station_id = station$station_id,sname = station$name)
View(stations)
stations = data.frame(station_id = station$station_id,sname = station$name,city = station$landmark)
View(stations)
stations = data.frame(stationinfo = paste(station$station_id,station$name),city = station$landmark)
View(stations)
stations = data.frame(stationinfo = paste(station$station_id,":",station$name),city = station$landmark)
View(station)
View(stations)
stations[stations$city == "San Jose"]
stations[stations$city == "San Jose",]
runApp('Example')
runApp('Example')
?fluidRow
runApp('Example')
runApp('Example')
stationinfo = data.frame(stationinfo = paste(station$station_id,":",station$name),city = station$landmark)
View(stationinfo)
View(stations)
View(stationinfo)
stationinfo = data.frame(station_id = station_id,stationinfo = paste(station$station_id,":",station$name),city = station$landmark)
stationinfo = data.frame(station_id = station$station_id,stationinfo = paste(station$station_id,":",station$name),city = station$landmark)
View(stationinfo)
runApp('Example')
runApp('Example')
View(stationinfo)
currentstation = stations[stationinfo$stationinfo == "2 : San Jose Diridon Caltrain Station",]
currentstation = stationinfo[stationinfo$stationinfo == "2 : San Jose Diridon Caltrain Station",]$station_id
currentstation
currentstation = station[station_id == currentstationid,]
currentstation = station[station$station_id == currentstationid,]
currentstation = station[station$station_id == currentstation,]
currentstation
runApp('Example')
runApp('Example')
runApp('Example')
c("Choose A Station" = "choose",stationinfo$stationinfo))
c("Choose A Station" = "choose",stationinfo$stationinfo)
rbind("Choose A Station" = "choose",stationinfo$stationinfo)
cbind("Choose A Station" = "choose",stationinfo$stationinfo)
cbind("Choose A Station",stationinfo$stationinfo)
c("Choose A Station",stationinfo$stationinfo)
stationinfo$stationinfo
View(station)
View(stationinfo)
View(trip)
runApp('Example')
runApp('Example')
runApp('Example')
endfreq = data.frame(table(trip$End.Terminal))
ggplot(data = endfreq, aes(x = Var1, y = Freq)) +
geom_bar(stat = "identity",fill = "blue",color = "darkblue") +
labs(title = "Popularity of Destinations",x = "Station_id",
y = "The Number of Trips Ending With It")
trip$date = as.Date(mdy_hm(trip$Start.Date))
datefreq =  as.data.frame(table(trip$date))
ggplot(data = datefreq,aes(x = Var1,y = Freq))+
geom_bar(stat = "identity",color = "darkblue",fill = "lightblue") +
labs(title = "Trips Distribution(Day)",x = "Date in Consideration",
y = "The Number of Trips")
View(trip)
startfreq = data.frame(table(trip$Start.Terminal))
View(startfreq)
stationinfo$stationinfo
data.frame
data.frame(stationinfo)
stationinfo$stationinfo[1,]
stationinfo$stationinfo[1]
rbind(stationinfo$stationinfo)
rbind(as.character(stationinfo$stationinfo))
rbind(c("Select"),as.character(stationinfo$stationinfo)))
rbind("Select",as.character(stationinfo$stationinfo)))
rbind("Select",as.character(stationinfo$stationinfo))
cbind("Select",as.character(stationinfo$stationinfo))
a = rbind("Select",as.character(stationinfo$stationinfo))
View(a)
a = c("Select",as.character(stationinfo$stationinfo))
a
runApp('Example')
as.data.frame(c("Select",stationinfo$stationinfo)))
as.data.frame(c("Select",stationinfo$stationinfo))
table(trip$Start.Terminal)
table(trip[trip$Start.Terminal == 2,])
table(trip[trip$Start.Terminal == 2])
trip[trip$Start.Terminal == 2]
trip[trip$Start.Terminal == 2,]
table(trip[trip$Start.Terminal == 2,]$End.Terminal)
a = table(trip[trip$Start.Terminal == 2,]$End.Terminal)
a = data.frame(table(trip[trip$Start.Terminal == 2,]$End.Terminal))
View(a)
runApp('Example')
tripfromcurrent = data.frame(table(trip[trip$Start.Terminal == fromBy,]$End.Terminal))
tripfromcurrent = data.frame(table(trip[trip$Start.Terminal == 4,]$End.Terminal))
tripfromcurrent$Freq
runApp('Example')
tripfromcurrent = data.frame(table(trip[trip$Start.Terminal == 2,]$End.Terminal))
output$barPlot <- renderPlot({
ggplot(data = tripfromcurrent, aes(x = tripfromcurrent$Var1, y = Freq)) +
geom_bar(stat = "identity",fill = "blue",color = "darkblue") +
labs(title = paste("Trips Begining With the Station",fromBy),x = "Station IDs",
y = "The Number of Trips")
})
tripfromcurrent = data.frame(table(trip[trip$Start.Terminal == 2,]$End.Terminal))
ggplot(data = tripfromcurrent, aes(x = tripfromcurrent$Var1, y = Freq)) +
geom_bar(stat = "identity",fill = "blue",color = "darkblue") +
labs(title = paste("Trips Begining With the Station",fromBy),x = "Station IDs",
y = "The Number of Trips")
tripfromcurrent = data.frame(table(trip[trip$Start.Terminal == 2,]$End.Terminal))
ggplot(data = tripfromcurrent, aes(x = tripfromcurrent$Var1, y = Freq)) +
geom_bar(stat = "identity",fill = "blue",color = "darkblue") +
labs(title = paste("Trips Begining With the Station"),x = "Station IDs",
y = "The Number of Trips")
runApp('Example')
runApp('Example')
runApp('Example')
?absolutePanel
runApp('Example')
runApp('Example')
runApp('Example')
?h2
runApp('Example')
table(wday(trip$date, label = TRUE))
View(trip)
ggplot(data = trip, aes(date)) +
geom_bar(aes(color = Subscription.Type), stat = "count") +
ggtitle("Customer Vs. Subscriber on Weekends and Weekdays") +
ylab("Total Number of Bicycle Trips") +
xlab("Trend Across Time") +
facet_grid(~weekend) +
theme(axis.text.x = element_blank())
tripfromcurrent = data.frame(table(trip[trip$Start.Terminal == 2,]$End.Terminal))
View(tripfromcurrent)
trip[trip$Start.Terminal == currentid,]$End.Terminal
trip[trip$Start.Terminal == 2,]$End.Terminal
trip[trip$Start.Terminal == 2,]
a = trip[trip$Start.Terminal == 2,]
View(a)
table(wday(trip$date, label = TRUE))
wday(trip$date, label = TRUE)
ggplot(data = trip[trip$Start.Terminal == 2,], aes(date)) +
geom_bar(aes(color = Subscription.Type), stat = "count") +
ggtitle("Customer Vs. Subscriber on Weekends and Weekdays") +
ylab("Total Number of Bicycle Trips") +
xlab("Trend Across Time") +
facet_grid(~weekend) +
theme(axis.text.x = element_blank())
facet_grid(~weekend)
ggplot(data = trip[trip$Start.Terminal == 2,], aes(date)) +
geom_bar(aes(color = Subscription.Type), stat = "count") +
ggtitle("Customer Vs. Subscriber on Weekends and Weekdays") +
ylab("Total Number of Bicycle Trips") +
xlab("Trend Across Time") +
facet_grid(~weekend)
ggplot(data = trip[trip$Start.Terminal == 2,], aes(X = date)) +
geom_bar(aes(color = Subscription.Type), stat = "count") +
ggtitle("Customer Vs. Subscriber on Weekends and Weekdays") +
ylab("Total Number of Bicycle Trips") +
xlab("Trend Across Time") +
facet_grid(~weekend)
ggplot(data = trip[trip$Start.Terminal == 2,], aes(x = date)) +
geom_bar(aes(color = Subscription.Type), stat = "count") +
ggtitle("Customer Vs. Subscriber on Weekends and Weekdays") +
ylab("Total Number of Bicycle Trips") +
xlab("Trend Across Time") +
facet_grid(~date)
View(trip)
ggplot(data = trip[trip$Start.Terminal == 2,], aes(x = date)) +
geom_bar(aes(color = Subscriber.Type), stat = "count") +
ggtitle("Customer Vs. Subscriber on Weekends and Weekdays") +
ylab("Total Number of Bicycle Trips") +
xlab("Trend Across Time") +
facet_grid(~date)
ggplot(data = trip[trip$Start.Terminal == 2,], aes(x = date)) +
geom_bar(aes(color = Subscriber.Type), stat = "count") +
ggtitle("Customer Vs. Subscriber on Weekends and Weekdays") +
ylab("Total Number of Bicycle Trips") +
xlab("Trend Across Time")
ggplot(data = trip[trip$Start.Terminal == 2,], aes(x = date)) +
geom_bar(aes(fill = Subscriber.Type), stat = "count") +
ggtitle("Customer Vs. Subscriber on Weekends and Weekdays") +
ylab("Total Number of Bicycle Trips") +
xlab("Trend Across Time")
ggplot(data = trip[trip$Start.Terminal == 2,], aes(x = wday(date,label = T))) +
geom_bar(aes(fill = Subscriber.Type), stat = "count") +
ggtitle("Customer Vs. Subscriber on Weekends and Weekdays") +
ylab("Total Number of Bicycle Trips") +
xlab("Trend Across Time")
geom_bar
?geom_bar
ggplot(data = trip[trip$Start.Terminal == 2,], aes(x = wday(date,label = T))) +
geom_bar(aes(fill = Subscriber.Type), stat = "count",position = "dodge") +
ggtitle("Customer Vs. Subscriber on Weekends and Weekdays") +
ylab("Total Number of Bicycle Trips") +
xlab("Trend Across Time")
ggplot(data = trip[trip$Start.Terminal == 2,], aes(x = wday(date,label = T))) +
geom_bar(aes(fill = Subscriber.Type), stat = "count",position = "dodge") +
ggtitle("Customer Vs. Subscriber on Weekends and Weekdays") +
ylab("Total Number of Bicycle Trips") +
xlab("Trend Across Time") +
facet(~subscription_type)
ggplot(data = trip[trip$Start.Terminal == 2,], aes(x = wday(date,label = T))) +
geom_bar(aes(fill = Subscriber.Type), stat = "count",position = "dodge") +
ggtitle("Customer Vs. Subscriber on Weekends and Weekdays") +
ylab("Total Number of Bicycle Trips") +
xlab("Trend Across Time") +
facet_wrap(~subscription_type)
ggplot(data = trip[trip$Start.Terminal == 2,], aes(x = wday(date,label = T))) +
geom_bar(aes(fill = Subscriber.Type), stat = "count",position = "dodge") +
ggtitle("Customer Vs. Subscriber on Weekends and Weekdays") +
ylab("Total Number of Bicycle Trips") +
xlab("Trend Across Time") +
facet_grid(.~subscription_type)
geom_bar(aes(fill = Subscriber.Type), stat = "count",position = "dodge") +
ggtitle("Customer Vs. Subscriber on Weekends and Weekdays") +
ylab("Total Number of Bicycle Trips") +
xlab("Trend Across Time") +
facet_grid(.~Subscriber.Type)
ggplot(data = trip[trip$Start.Terminal == 2,], aes(x = wday(date,label = T))) +
geom_bar(aes(fill = Subscriber.Type), stat = "count",position = "dodge") +
ggtitle("Customer Vs. Subscriber on Weekends and Weekdays") +
ylab("Total Number of Bicycle Trips") +
xlab("Trend Across Time") +
facet_grid(.~Subscriber.Type)
runApp('Example')
?icon
icon("calendar")
runApp('Example')
navbarPage("App Title",
tabPanel("Plot", icon = icon("bar-chart-o")),
tabPanel("Summary", icon = icon("list-alt")),
tabPanel("Table", icon = icon("table"))
)
runApp('Example')
runApp('Example')
?
absolutePanel
??panel
runApp('Example')
runApp('Example')
?plotOutput
absolutePanel
runApp('Example')
hour = floor(hour(hms) + minute(hms)/60)
hourfreq = as.data.frame(table(hour))
ggplot(data = hourfreq, aes(x = hour, y = Freq)) +
geom_bar(stat = "identity",fill = "blue",color = "darkblue") +
labs(title = "Trips Distribution(One Day)",x = "Hours in a Day",
y = "The Number of Trips")
# Lines
hms = ymd_hms(mdy_hm(trip$Start.Date))
trip$hour = hour(hms) + minute(hms)/60
ggplot(trip, aes(x = hour)) +
geom_freqpoly(bins = 100,color = "blue") +
labs(title = "Trips Distribution(One Day)",x = "Hours in a Day",
y = "The Number of Trips")
#Barplot
hour = floor(hour(hms) + minute(hms)/60)
hourfreq = as.data.frame(table(hour))
ggplot(data = hourfreq, aes(x = hour, y = Freq)) +
geom_bar(stat = "identity",fill = "blue",color = "darkblue") +
labs(title = "Trips Distribution(One Day)",x = "Hours in a Day",
y = "The Number of Trips")
ggplot(data = hourfreq, aes(x = hour, y = Freq)) +
geom_bar(stat = "identity",fill = "blue",color = "darkblue") +
labs(title = "Trips Distribution(One Day)",x = "Hours in a Day",
y = "The Number of Trips")
trip[trip$Start.Terminal == 2,]
trip[trip$Start.Terminal == 2 & trip$End.Terminal == 4,]
trip[trip$Start.Terminal == 2 & trip$End.Terminal == 20,]
trip[trip$Start.Terminal == 2 & trip$End.Terminal == 25,]
trip[trip$Start.Terminal == 2 & trip$End.Terminal == 12,]
hms = ymd_hms(mdy_hm(trip$Start.Date))
trip$hour = hour(hms) + minute(hms)/60
ggplot(trip, aes(x = hour)) +
geom_freqpoly(bins = 100,color = "blue") +
labs(title = "Trips Distribution(One Day)",x = "Hours in a Day",
y = "The Number of Trips")
runApp('Example')
runApp('Example')
runApp('Example')
runApp('Example')
